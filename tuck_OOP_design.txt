Account:
    # purpose: to create, load and interact with individual accounts
	Attribs:
		- account_id            id                  # stored everywhere # UUID
		- f_name                name                # stored separately; fields[account_id, f_name, date]
		- l_name                name                # stored separately; fields[account_id, l_name, date]
		- balance               amount              # stored both here and separately; fields[account_id, amount, date]  # separate table stores top ups
		- spending_limit        *[amount, per]      # stored separately; fields[account_id, amount, per, start_date, end_date, void, date]  # object will load all active item_conditions  # spending limit reached will be calculated by Transactions
		- discount              *[amount, type]     # stored separately; fields[account_id, amount, type, start_date, end_date, void, date]  # object will load all active item_conditions
		- sub_zero_allowance    *[amount]           # stored separately; fields[account_id, amount, start_date, end_date, void, date]  # object will load all active item_conditions
		- notes                 note                # stored separately; fields[account_id, notes, date]
		- date_created          date                # stored here only
		- void                  void                # stored here only  # important for keeping track of related transactions if deleted
		# note: stored "here" refers to in the account table
	Methods:
	    - __init__(account_id=None)

		- add_account(f_name, l_name, balance=0, notes="")
		- delete_account()

		- add_discount(amount, type, start_date, end_date)
		- delete_discount(date)

		- add_spending_limit(amount, per, start_date, end_date)
		- delete_spending_limit(date)

		- add_sub_zero_allowance(amount, start_date, end_date)
		- delete_sub_zero_allowance(date)

		- update_details(**details)  # calls appropriate method below based on details key name

Product:
	Attribs:
		- product_id        id                      # stored everywhere  # UUID
		- p_name            name                    # stored separately; fields[product_id, p_name, date]
		- supplier          name                    # stored separately; fields[product_id, supplier, date]
		- cost_price        amount                  # stored separately; fields[product_id, amount, date]
		- sale_price        amount                  # stored separately; fields[product_id, amount, date]
		- quantity          amount                  # stored both here and separately; fields[product_id, amount, date] # separate table stores top ups
		- purchase_limit    [amount, per]           # stored separately; fields[product_id, amount, per, start_date, end_date, void, date]  # object will load all active item_conditions  # purchase limit reached will be calculated by Transactions
		- discount          *[amount, type]         # stored separately; fields[product_id, amount, type, start_date, end_date, void, date]  # object will load all active item_conditions
		- offer             *[buy_x, get_y, z_off]  # stored separately; fields[product_id, buy_x, get_y, z_off, start_date, end_date, void, date]  # object will load all active item_conditions
		- notes             note                    # stored separately; fields[product_id, notes, date]
		- date_created      date                    # stored here only
		- void              void                    # stored here only  # important for keeping track of related transactions if deleted
	Methods:
	    - __init__(account_id=None)

		- add_product(f_name, l_name, balance=0, notes="")
		- delete_product()

		- add_discount(amount, type, start_date, end_date)
		- delete_discount(date)

		- add_purchase_limit(amount, per, start_date, end_date)
		- delete_purchase_limit(date)

		- add_offer(buy_x, get_y, z_off, start_date, end_date)
		- delete_offer(date)

		- update_details(**details)  # calls appropriate method below based on details key name

Transaction:
    Attribs:
        - account
        - product
        - quantity
        - amount  # final amount after all promotions are accounted for
        - date
        - void
	Methods:
		- record_transaction(account, product, quantity)
        - revert_transaction(account, product, date)  # should mark transaction as void to keep history of it

Inherit:  # container for common functions to be inherited by account and product
	Methods:
		- _db_execute(sql_command, *parameters)
		- _check_item_exists(cmd)
		- _check_param_validity(amount, start_date, end_date, void=None)
		- _get_last_id(table)
		- _run_condition_insert_commands(get_items, void, update_void, add_new, caller)
		- _run_condition_delete_commands(table, **primary_key)
		- _get_active_item_condition(cmd, start_date_pos)
		- _get_last_by_date(table)
		- _check_type_param(type_)
		- _add_discount(caller, amount, type_, start_date, end_date, void=False)
		- _add_limit(caller, amount, per, start_date, end_date, void=False)
		- _update_item(table, value, *type_)

ItemHistory:  # returns all history using item_id (e.g. account_id) and field name (e.g. balance)
    Methods:
        - get_history(item_id, field_name)

Organiser:  # temp class for interacting with database
    Methods:
        - create_database()
        - show_database_structure()
        - show_table(table_name)
        - show_all_tables()
        - purge_data()

GUI:
	Methods:
		[- navigatable menus]
		- get_accounts()
		- get_products()
		- get_transactions(account_ID=None, product_ID=None)
		- import_accounts(address)
		- import_products(address)