Account:
    # purpose: to create, load and interact with individual accounts
	Attribs:
		- account_id            id                                      # stored everywhere # UUID
		- f_name                name                                    # stored separately; fields[account_id, f_name, date]
		- l_name                name                                    # stored separately; fields[account_id, l_name, date]
		- balance               amount                                  # stored both here and separately; fields[account_id, amount, date]  # separate table stores top ups
		- spending_limit        *[amount, per, start_date, end_date]    # stored separately; fields[account_id, amount, per, start_date, end_date, void, date]  # object will load all active item_conditions  # spending limit reached will be calculated by Transactions
		- discount              *[amount, type, start_date, end_date]   # stored separately; fields[account_id, amount, type, start_date, end_date, void, date]  # object will load all active item_conditions
		- sub_zero_allowance    *[amount, start_date, end_date]         # stored separately; fields[account_id, amount, start_date, end_date, void, date]  # object will load all active item_conditions
		- notes                 note                                    # stored separately; fields[account_id, notes, date]
		- date_created          date                                    # stored here only
		- void                  void                                    # stored here only  # important for keeping track of related transactions if deleted
		# note: stored "here" refers to in the account table
	Methods:
	    - __init__(account_id=None)

		- add_account(f_name, l_name, balance=0, notes="")
		- delete_account()

		- add_discount(amount, type, start_date, end_date)
		- delete_discount(date)

		- add_spending_limit(amount, per, start_date, end_date)
		- delete_spending_limit(date)

		- add_sub_zero_allowance(amount, start_date, end_date)
		- delete_sub_zero_allowance(date)

		- update_detail(**details)  # calls appropriate method below based on details key name

		- _update_f_name(name)
		- _update_l_name(name)
		- _update_balance(amount)
		- _update_notes(note)

# --------------------------------------------- BELOW THIS LINE HAS NOT YET BEEN UPDATED

Product:
	Attribs:
		- product_id
		- product_name
		- supplier
		- cost_price
		- sale_price
		- quantity
		- purchase_limit
		- discount [amount, type]
		- offer [buy_x, get_y, z_off]
		- notes
		- date_created
		- void  # important for keeping track of related transactions if deleted
	Methods:
		- add_product / delete_product / update_product  # update applies to product_name, supplier and notes
		- update_cost_price / update_sale_price
		- add_discount / delete_discount
		- add_purchase_limit / delete_purchase_limit
		- add_offer / delete_offer

Transaction:
    Attribs:
        - account
        - product
        - quantity
        - date
        - void
	Methods:
		- record_transaction(account, product, quantity)
        - revert_transaction(account, product, date)  # should mark transaction as void to keep history of it

ItemFuncs:  # container for common functions to be inherited by account and product
	Methods:
		- add_item / delete_item / update_item
		- add_discount / remove_discount
		- add_limit / remove_limit

ItemHistory:  # returns all history using item_id (e.g. account_id) and field name (e.g. balance)
    Methods:
        - get_history(item_id, field_name)

Organiser:  # temp class for interacting with database
    Methods:
        - create_database
        - show_database_structure
        - show_table(table_name)
        - purge_data

GUI:
	Methods:
		- get_all_accounts
		- get_all_products
		- get_account
		- get_product
		[- navigatable menus]
		- import_accounts
		- import_products